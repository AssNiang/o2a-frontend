name: Pipeline Angular

permissions:
  contents: read

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  DOCKER_IMAGE_NAME: 'sas792/frontend'
  AZURE_WEB_APP: 'o2a-frontend'


jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]


    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'


#     - name: OWASP Dependency Track check
#       # You may pin to the exact commit or the version.
#       # uses: Quobis/action-owasp-dependecy-track-check@2d4568e0746b85da804fe390b519631c88edf8fe
#       uses: Quobis/action-owasp-dependecy-track-check@v1.3
#       with:
#         # URL of OWASP Dependency Track REST API
#         url: 'https://dtrack.quobis.com'
#         # Key to access OWASP Dependency Track REST API
#         key: 'USEAVALIDKEY'
#         # Programming language
#         language: 'nodejs'

    - name: Dependency Review
      uses: actions/dependency-review-action@v2.1.0
      with:
        # Token for the repository. Can be passed in using `{{ secrets.GITHUB_TOKEN }}`.
        repo-token: ${{ secrets.GITHUB_TOKEN }}
#         # Don't block PRs below this severity. Possible values are `low`, `moderate`, `high`, `critical`.
#         fail-on-severity: # optional, default is low
        # # The base git ref to be used for this check. Has a default value when the workflow event is `pull_request` or `pull_request_target`. Must be provided otherwise.
        # base-ref: 'head_ref'
#         # The head git ref to be used for this check. Has a default value when the workflow event is `pull_request` or `pull_request_target`. Must be provided otherwise.
#         head-ref: # optional
#         # Comma-separated list of allowed licenses (e.g. "MIT, GPL 3.0, BSD 2 Clause")
#         allow-licenses: # optional
#         # Comma-separated list of forbidden licenses (e.g. "MIT, GPL 3.0, BSD 2 Clause")
#         deny-licenses: # optional


    - name: Install Dependencies
      run: npm ci
      

    - name: Run Tests
      run: npm run test-cicd


    - name: Analyse with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


    - name: Clean Distribution Directory
      run: npm run clean-cicd


    - name: Build Application
      run: npm run build-cicd


    # - name: Build the Docker image
    #   run: |
    #     docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
    #     docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest
    #     docker push ${{ env.DOCKER_IMAGE_NAME }}:latest


    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}


    # - name: Azure WebApp Deployment
    #   uses: Azure/webapps-deploy@v2
    #   with:
    #     app-name: '${{ env.AZURE_WEB_APP }}'
    #     images: '$ {{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest'

#***************************************************

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: 'Deploy to Azure Container Instances'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: aci-frontend
        location: 'central us'

  # for the deployment, this link helped a lot :
    # https://docs.microsoft.com/en-us/azure/container-instances/container-instances-github-action


  # to validate the workflow, we put in the azure cli :
    #   az container show \
    #   --resource-group o2aResourceGroup \
    #   --name aci-frontend \
    #   --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" \
    #   --output table
  # then we copy the url !
