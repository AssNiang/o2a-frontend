name: Pipeline Angular

permissions:
  contents: read

on:

  pull_request:
    branches: [ "main", "dev" ]
env:
  DOCKER_IMAGE_NAME: 'sas792/frontend'
  AZURE_WEB_APP: 'o2a-frontend'

# add a line in order to commit a pr after
jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]


    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'


    - name: Install Dependencies
      run: npm ci


    - name: Dependency Review To Check For Vulnerabilities
      uses: actions/dependency-review-action@v2.1.0
      with:
        # Token for the repository. Can be passed in using `{{ secrets.GITHUB_TOKEN }}`.
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        # Don't block PRs below this severity. Possible values are `low`, `moderate`, `high`, `critical`.
        fail-on-severity: low
        

    - name: Run Tests
      run: npm run test-cicd


    - name:  SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN1 }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


    - name: "Check Quality Gate"
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN1 }}
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


#     - name: Analyse with SonarCloud
#       uses: sonarsource/sonarcloud-github-action@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


    - name: Clean Distribution Directory
      run: npm run clean-cicd


    - name: Build Application
      run: npm run build-cicd


    - name: Build and push the Docker image in my dockerHub
      run: |
        docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
        docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ env.DOCKER_IMAGE_NAME }}:latest


# #***************************************************

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Login to azure/docker'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: 'Build and push image'
      run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: 'Deploy to Azure Container Instances'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: aci-frontend
        location: 'central us'

    - name: Azure CLI script to get the url
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az container show \
          --resource-group o2aResourceGroup \
          --name aci-frontend \
          --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" \
          --output table
          
    
    - name: Wait for deploy to finish
      uses: jakejarvis/wait-action@master
      with:
        time: '180s'
        

    - name : Test deploy
      id: tes-deploy-dev
      uses: indiesdev/curl@v1.1
      with:
          url: http://${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}.centralus.azurecontainer.io
          method: "GET"
          accept: 200
          timeout: 5000
          log-response: true
          retries: 2

#   # for the deployment, this link helped a lot :
#     # https://docs.microsoft.com/en-us/azure/container-instances/container-instances-github-action


#   # to validate the workflow, we put in the azure cli :
#     #   az container show \
#     #   --resource-group o2aResourceGroup \
#     #   --name aci-frontend \
#     #   --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" \
#     #   --output table
#   # then we copy the url !
